
# This file is automatically generated by generate_assembler.py. 
# Do not edit it manually.
            
instructions = []
    
def nop():
	
        
	instruction = 0x0
	
	instructions.append((instruction, 16))
    
def dar(a):
	assert 0 <= a and a < 4
        
	instruction = 0x4
	instruction |= (a << 0)
	instructions.append((instruction, 16))
    
def iar(a):
	assert 0 <= a and a < 4
        
	instruction = 0x8
	instruction |= (a << 0)
	instructions.append((instruction, 16))
    
def addarn(b, a):
	assert 0 <= b and b < 4
	assert 0 <= a and a < 4
        
	instruction = 0x10
	instruction |= (b << 2)
	instruction |= (a << 0)
	instructions.append((instruction, 16))
    
def halt():
	
        
	instruction = 0x21
	
	instructions.append((instruction, 16))
    
def loop(r):
	assert 0 <= r and r < 32
        
	instruction = 0x40
	instruction |= (r << 0)
	instructions.append((instruction, 16))
    
def bloop(r):
	assert 0 <= r and r < 32
        
	instruction = 0x60
	instruction |= (r << 0)
	instructions.append((instruction, 16))
    
def lri(r, i):
	assert 0 <= r and r < 32
	assert 0 <= i and i < 65536
        
	instruction = 0x800000
	instruction |= (r << 16)
	instruction |= (i << 0)
	instructions.append((instruction, 32))
    
def lr(r, m):
	assert 0 <= r and r < 32
	assert 0 <= m and m < 65536
        
	instruction = 0xc00000
	instruction |= (r << 16)
	instruction |= (m << 0)
	instructions.append((instruction, 32))
    
def sr(r, m):
	assert 0 <= r and r < 32
	assert 0 <= m and m < 65536
        
	instruction = 0xe00000
	instruction |= (r << 16)
	instruction |= (m << 0)
	instructions.append((instruction, 32))
    
def if_cc(c):
	assert 0 <= c and c < 16
        
	instruction = 0x270
	instruction |= (c << 0)
	instructions.append((instruction, 16))
    
def jmp_cc(c, a):
	assert 0 <= c and c < 16
	assert 0 <= a and a < 65536
        
	instruction = 0x2900000
	instruction |= (c << 16)
	instruction |= (a << 0)
	instructions.append((instruction, 32))
    
def call_cc(c):
	assert 0 <= c and c < 16
        
	instruction = 0x2b0
	instruction |= (c << 0)
	instructions.append((instruction, 16))
    
def ret_cc(c):
	assert 0 <= c and c < 16
        
	instruction = 0x2d0
	instruction |= (c << 0)
	instructions.append((instruction, 16))
    
def addi(r, i):
	assert 0 <= r and r < 2
	assert 0 <= i and i < 65536
        
	instruction = 0x2000000
	instruction |= (r << 24)
	instruction |= (i << 0)
	instructions.append((instruction, 32))
    
def xori(r, i):
	assert 0 <= r and r < 2
	assert 0 <= i and i < 65536
        
	instruction = 0x2200000
	instruction |= (r << 24)
	instruction |= (i << 0)
	instructions.append((instruction, 32))
    
def andi(r, i):
	assert 0 <= r and r < 2
	assert 0 <= i and i < 65536
        
	instruction = 0x2400000
	instruction |= (r << 24)
	instruction |= (i << 0)
	instructions.append((instruction, 32))
    
def ori(r, i):
	assert 0 <= r and r < 2
	assert 0 <= i and i < 65536
        
	instruction = 0x2600000
	instruction |= (r << 24)
	instruction |= (i << 0)
	instructions.append((instruction, 32))
    
def cmpi(r, i):
	assert 0 <= r and r < 2
	assert 0 <= i and i < 65536
        
	instruction = 0x2800000
	instruction |= (r << 24)
	instruction |= (i << 0)
	instructions.append((instruction, 32))
    
def andcf(r, i):
	assert 0 <= r and r < 2
	assert 0 <= i and i < 65536
        
	instruction = 0x2a00000
	instruction |= (r << 24)
	instruction |= (i << 0)
	instructions.append((instruction, 32))
    
def andf(r, i):
	assert 0 <= r and r < 2
	assert 0 <= i and i < 65536
        
	instruction = 0x2c00000
	instruction |= (r << 24)
	instruction |= (i << 0)
	instructions.append((instruction, 32))
    
def ilrr(r, m, a):
	assert 0 <= r and r < 2
	assert 0 <= m and m < 4
	assert 0 <= a and a < 4
        
	instruction = 0x210
	instruction |= (r << 8)
	instruction |= (m << 2)
	instruction |= (a << 0)
	instructions.append((instruction, 16))
    
def addis(d, i):
	assert 0 <= d and d < 2
	assert 0 <= i and i < 256
        
	instruction = 0x400
	instruction |= (d << 8)
	instruction |= (i << 0)
	instructions.append((instruction, 16))
    
def cmpis(d, i):
	assert 0 <= d and d < 2
	assert 0 <= i and i < 256
        
	instruction = 0x600
	instruction |= (d << 8)
	instruction |= (i << 0)
	instructions.append((instruction, 16))
    
def lris(r, i):
	assert 0 <= r and r < 8
	assert 0 <= i and i < 256
        
	instruction = 0x800
	instruction |= (r << 8)
	instruction |= (i << 0)
	instructions.append((instruction, 16))
    
def loopi(i, a):
	assert 0 <= i and i < 256
	assert 0 <= a and a < 65536
        
	instruction = 0x10000000
	instruction |= (i << 16)
	instruction |= (a << 0)
	instructions.append((instruction, 32))
    
def bloopi(i, a):
	assert 0 <= i and i < 256
	assert 0 <= a and a < 65536
        
	instruction = 0x11000000
	instruction |= (i << 16)
	instruction |= (a << 0)
	instructions.append((instruction, 32))
    
def sbset_bit_set(i):
	assert 0 <= i and i < 8
        
	instruction = 0x1200
	instruction |= (i << 0)
	instructions.append((instruction, 16))
    
def sbclr_bit_clear(i):
	assert 0 <= i and i < 8
        
	instruction = 0x1300
	instruction |= (i << 0)
	instructions.append((instruction, 16))
    
def lsl(r, s):
	assert 0 <= r and r < 2
	assert 0 <= s and s < 64
        
	instruction = 0x1400
	instruction |= (r << 8)
	instruction |= (s << 0)
	instructions.append((instruction, 16))
    
def lsr(r, s):
	assert 0 <= r and r < 2
	assert 0 <= s and s < 64
        
	instruction = 0x1440
	instruction |= (r << 8)
	instruction |= (s << 0)
	instructions.append((instruction, 16))
    
def asl(r, s):
	assert 0 <= r and r < 2
	assert 0 <= s and s < 64
        
	instruction = 0x1480
	instruction |= (r << 8)
	instruction |= (s << 0)
	instructions.append((instruction, 16))
    
def asr(r, s):
	assert 0 <= r and r < 2
	assert 0 <= s and s < 64
        
	instruction = 0x14c0
	instruction |= (r << 8)
	instruction |= (s << 0)
	instructions.append((instruction, 16))
    
def si(i, m):
	assert 0 <= i and i < 256
	assert 0 <= m and m < 65536
        
	instruction = 0x16000000
	instruction |= (i << 16)
	instruction |= (m << 0)
	instructions.append((instruction, 32))
    
def callr(r):
	assert 0 <= r and r < 8
        
	instruction = 0x171f
	instruction |= (r << 5)
	instructions.append((instruction, 16))
    
def jmpr(r):
	assert 0 <= r and r < 8
        
	instruction = 0x170f
	instruction |= (r << 5)
	instructions.append((instruction, 16))
    
def lrr(x, a, r):
	assert 0 <= x and x < 4
	assert 0 <= a and a < 4
	assert 0 <= r and r < 32
        
	instruction = 0x1800
	instruction |= (x << 7)
	instruction |= (a << 5)
	instruction |= (r << 0)
	instructions.append((instruction, 16))
    
def srr(x, a, r):
	assert 0 <= x and x < 4
	assert 0 <= a and a < 4
	assert 0 <= r and r < 32
        
	instruction = 0x1a00
	instruction |= (x << 7)
	instruction |= (a << 5)
	instruction |= (r << 0)
	instructions.append((instruction, 16))
    
def mrr(d, s):
	assert 0 <= d and d < 32
	assert 0 <= s and s < 32
        
	instruction = 0x1c00
	instruction |= (d << 5)
	instruction |= (s << 0)
	instructions.append((instruction, 16))
    
def lrs(r, m):
	assert 0 <= r and r < 8
	assert 0 <= m and m < 256
        
	instruction = 0x2000
	instruction |= (r << 8)
	instruction |= (m << 0)
	instructions.append((instruction, 16))
    
def srs(r, m):
	assert 0 <= r and r < 8
	assert 0 <= m and m < 256
        
	instruction = 0x2800
	instruction |= (r << 8)
	instruction |= (m << 0)
	instructions.append((instruction, 16))
    
def xorr(s, r, x):
	assert 0 <= s and s < 2
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0x3000
	instruction |= (s << 9)
	instruction |= (r << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def andr(s, r, x):
	assert 0 <= s and s < 2
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0x3400
	instruction |= (s << 9)
	instruction |= (r << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def orr(s, r, x):
	assert 0 <= s and s < 2
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0x3800
	instruction |= (s << 9)
	instruction |= (r << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def andc(r, x):
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0x3c00
	instruction |= (r << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def orc(r, x):
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0x3e00
	instruction |= (r << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def addr(s, d, x):
	assert 0 <= s and s < 4
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x4000
	instruction |= (s << 9)
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def addax(s, d, x):
	assert 0 <= s and s < 2
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x4800
	instruction |= (s << 9)
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def add(d, x):
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x4c00
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def addp(d, x):
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x4e00
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def subr(s, d, x):
	assert 0 <= s and s < 4
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x5000
	instruction |= (s << 9)
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def subax(s, d, x):
	assert 0 <= s and s < 2
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x5800
	instruction |= (s << 9)
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def sub(d, x):
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x5c00
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def subp(d, x):
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x5e00
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def movr(s, d, x):
	assert 0 <= s and s < 4
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x6000
	instruction |= (s << 9)
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def movax(s, d, x):
	assert 0 <= s and s < 2
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x6800
	instruction |= (s << 9)
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def mov(d, x):
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x6c00
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def movp(d, x):
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x6e00
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def addaxl(s, d, x):
	assert 0 <= s and s < 2
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x7000
	instruction |= (s << 9)
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def incm(d, x):
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x7400
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def inc(d, x):
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x7600
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def decm(d, x):
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x7800
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def dec(d, x):
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x7a00
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def neg(d, x):
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x7c00
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def movnp(d, x):
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0x7e00
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def nx(y, x):
	assert 0 <= y and y < 2
	assert 0 <= x and x < 256
        
	instruction = 0x8000
	instruction |= (y << 11)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def clr(r, x):
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0x8100
	instruction |= (r << 11)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def cmp(x):
	assert 0 <= x and x < 256
        
	instruction = 0x8200
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def mulaxh(x):
	assert 0 <= x and x < 256
        
	instruction = 0x8300
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def clrp(x):
	assert 0 <= x and x < 256
        
	instruction = 0x8400
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def tstprod(x):
	assert 0 <= x and x < 256
        
	instruction = 0x8500
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def tstaxh(r, x):
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0x8600
	instruction |= (r << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def m2(x):
	assert 0 <= x and x < 256
        
	instruction = 0x8a00
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def m0(x):
	assert 0 <= x and x < 256
        
	instruction = 0x8b00
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def clr15(x):
	assert 0 <= x and x < 256
        
	instruction = 0x8c00
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def set15(x):
	assert 0 <= x and x < 256
        
	instruction = 0x8d00
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def set16(x):
	assert 0 <= x and x < 256
        
	instruction = 0x8e00
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def set40(x):
	assert 0 <= x and x < 256
        
	instruction = 0x8f00
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def mul(s, x):
	assert 0 <= s and s < 2
	assert 0 <= x and x < 256
        
	instruction = 0x9000
	instruction |= (s << 11)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def asr16(r, x):
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0x9100
	instruction |= (r << 11)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def mulmvz(s, r, x):
	assert 0 <= s and s < 2
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0x9200
	instruction |= (s << 11)
	instruction |= (r << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def mulac(s, r, x):
	assert 0 <= s and s < 2
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0x9400
	instruction |= (s << 11)
	instruction |= (r << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def mulmv(s, r, x):
	assert 0 <= s and s < 2
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0x9600
	instruction |= (s << 11)
	instruction |= (r << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def mulx(s, t, x):
	assert 0 <= s and s < 2
	assert 0 <= t and t < 2
	assert 0 <= x and x < 256
        
	instruction = 0xa000
	instruction |= (s << 12)
	instruction |= (t << 11)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def abs(d, x):
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0xa100
	instruction |= (d << 11)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def tst(r, x):
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0xb100
	instruction |= (r << 11)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def mulxmvz(s, t, r, x):
	assert 0 <= s and s < 2
	assert 0 <= t and t < 2
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0xa200
	instruction |= (s << 12)
	instruction |= (t << 11)
	instruction |= (r << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def mulxac(s, t, r, x):
	assert 0 <= s and s < 2
	assert 0 <= t and t < 2
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0xa400
	instruction |= (s << 12)
	instruction |= (t << 11)
	instruction |= (r << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def mulxmv(s, t, r, x):
	assert 0 <= s and s < 2
	assert 0 <= t and t < 2
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0xa600
	instruction |= (s << 12)
	instruction |= (t << 11)
	instruction |= (r << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def mulc(s, t, x):
	assert 0 <= s and s < 2
	assert 0 <= t and t < 2
	assert 0 <= x and x < 256
        
	instruction = 0xc000
	instruction |= (s << 12)
	instruction |= (t << 11)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def cmpaxh(r, s, x):
	assert 0 <= r and r < 2
	assert 0 <= s and s < 2
	assert 0 <= x and x < 256
        
	instruction = 0xc100
	instruction |= (r << 12)
	instruction |= (s << 11)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def mulcmvz(s, t, r, x):
	assert 0 <= s and s < 2
	assert 0 <= t and t < 2
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0xc200
	instruction |= (s << 12)
	instruction |= (t << 11)
	instruction |= (r << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def mulcac(s, t, r, x):
	assert 0 <= s and s < 2
	assert 0 <= t and t < 2
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0xc400
	instruction |= (s << 12)
	instruction |= (t << 11)
	instruction |= (r << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def mulcmv(s, t, r, x):
	assert 0 <= s and s < 2
	assert 0 <= t and t < 2
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0xc600
	instruction |= (s << 12)
	instruction |= (t << 11)
	instruction |= (r << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def maddx(s, t, x):
	assert 0 <= s and s < 2
	assert 0 <= t and t < 2
	assert 0 <= x and x < 256
        
	instruction = 0xe000
	instruction |= (s << 9)
	instruction |= (t << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def msubx(s, t, x):
	assert 0 <= s and s < 2
	assert 0 <= t and t < 2
	assert 0 <= x and x < 256
        
	instruction = 0xe400
	instruction |= (s << 9)
	instruction |= (t << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def maddc(s, t, x):
	assert 0 <= s and s < 2
	assert 0 <= t and t < 2
	assert 0 <= x and x < 256
        
	instruction = 0xe800
	instruction |= (s << 9)
	instruction |= (t << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def msubc(s, t, x):
	assert 0 <= s and s < 2
	assert 0 <= t and t < 2
	assert 0 <= x and x < 256
        
	instruction = 0xec00
	instruction |= (s << 9)
	instruction |= (t << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def lsl16(r, x):
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0xf000
	instruction |= (r << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def madd(s, x):
	assert 0 <= s and s < 2
	assert 0 <= x and x < 256
        
	instruction = 0xf200
	instruction |= (s << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def lsr16(r, x):
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0xf400
	instruction |= (r << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def msub(s, x):
	assert 0 <= s and s < 2
	assert 0 <= x and x < 256
        
	instruction = 0xf600
	instruction |= (s << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def addpaxz(s, d, x):
	assert 0 <= s and s < 2
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0xf800
	instruction |= (s << 9)
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def clrl(r, x):
	assert 0 <= r and r < 2
	assert 0 <= x and x < 256
        
	instruction = 0xfc00
	instruction |= (r << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))
    
def movpz(d, x):
	assert 0 <= d and d < 2
	assert 0 <= x and x < 256
        
	instruction = 0xfe00
	instruction |= (d << 8)
	instruction |= (x << 0)
	instructions.append((instruction, 16))


def get_label():
    return sum(i[1] for i in instructions) // 16

def assemble():
    byte_list = []
    length = 0

    for instruction in instructions:
        length += instruction[1] // 8
        for byte in range(instruction[1] // 8):
            byte_list.append((instruction[0] >> ((instruction[1] // 8 - byte - 1) * 8)) & 0xff)

    return (byte_list, length)

def get_num_bytes():
    return sum(i[1] // 8 for i in instructions)

def get_num_instructions():
    return len(instructions)
            
def reset():
    global instructions
    instructions = []
